name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t ftfg777/my-app .

      - name: Docker login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker push ftfg777/my-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      HOST: ${{ secrets.EC2_HOST }}
      USER: ${{ secrets.EC2_USER }}

    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh  # ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

      - name: Deploy Docker image to EC2
        run: |
          # SSH로 EC2에 접속하여 Docker 명령 실행
          ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            
          # Docker Hub에서 최신 이미지 다운로드
          docker pull ftfg777/my-app:latest
            
          # 기존 컨테이너가 있다면 종료
          docker ps -q --filter "name=my-app" | xargs -r docker stop
          docker ps -aq --filter "name=my-app" | xargs -r docker rm
          
          # 새로운 Docker 컨테이너 실행 (자동 재시작 설정 추가)
          docker run -d --restart always -p 8080:8080 --name my-app ftfg777/my-app:latest
          EOF